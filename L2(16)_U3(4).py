#!/usr/bin/env python
# coding: utf-8

# In[1]:


# Supplementary Python/mmgroup code for the paper
# "Indeed, the Monster has no almost simple maximal subgroups with socle isomorphic to PSL2(16) or PSU3(4)"
# by H. Dietrich, M. Lee, and T. Popiel.
#
# Version 1.0
# 6 October 2023

# Import the mmgroup package and define the commutator
from mmgroup import *
Comm = lambda a,b : a**(-1)*b**(-1)*a*b


# In[2]:


# Listing 1
# This is for verifying the proof of Proposition 2 and part of the proof of Proposition 3

# Generators for A12
x3 = MM("M<y_31h*x_0d92h*d_85ah*p_240874113*l_1*p_80762880*l_1*p_221802288*t_1*l_2*p_50160000*l_1*p_232003248*l_2*t_2*l_1*p_78988800*l_1*p_182328960*l_1*t_1*l_2*p_118018560*l_1*t_1*l_1*p_183216000*l_1>")
x10 = MM("M<y_491h*x_18h*d_77ah*p_179668320*l_1*p_68344320*l_2*p_159709440*l_2*t_1*l_1*p_70561920*l_2*p_242647728*l_2*t_1*l_1*p_79875840*l_1*p_182772480*l_1*t_1*l_1*p_4012800*l_2*t_1*l_2*p_117575040*l_1>")
# Verify that x3 and x10 satisfy the presentation for A12 in the proof of Proposition 2
print(x3**3 == x10**10 == (x3*x10)**11 == Comm(x3,x10)**2 == (x3*x10**-2*x3*x10**2)**2 == Comm(x3,x10**3)**2 == (x3*x10**-4*x3*x10**4)**2 == Comm(x3,x10**5)**2 == MM("M<1>"))

# Generators for A5 commuting with A12
a2 = MM("M<y_511h*x_19e5h*d_0f88h*p_175676956*l_2*p_127776000*t_2*l_1*p_60360960*l_1*p_193416960*l_2*t_1*l_1*p_69231360*l_2*p_162370608*l_2*t_2*l_1*p_67457280>")
a3 = MM("M<y_411h*x_158eh*d_64fh*p_160702030*l_2*p_1900800*l_2*p_684131*t_1*l_1*p_1499520*l_1*p_32064306*l_2*t_1*l_2*p_1394880*l_1*p_22320*l_2*p_98880*t_2*l_2*p_2830080*l_2*p_21469865*t_2*l_2*p_2830080*l_2*p_106661290*t_1*l_2*p_2597760*l_1*p_43613421*t_2*l_2*p_2830080*l_2*p_96456578>")
# Verify that a2 and a3 satisfy the presentation for A5 in the proof of Proposition 2
print(a2**2 == a3**3 == (a2*a3)**5 == MM("M<1>"))

# Generators for A5 < A12 with orbits of size 6 and 6 on 12 points
b2 = MM("M<y_599h*x_41ah*d_6b7h*p_240430467*l_1*p_70561920*l_1*p_140194560*t_1*l_1*p_81206400*l_2*p_169023408*l_1*t_1*l_2*p_79432320*l_2*p_212044848*l_2*t_1*l_2*p_59917440*l_1*p_157048416>")
b3 = MM("M<y_1eeh*x_15e7h*d_0d65h*p_141989494*l_1*p_59473920*l_2*p_131767728*l_2*t_2*l_2*p_50160000*l_2*p_179224368*l_2*t_2*l_1*p_71005440*l_1*p_243091248*l_1*t_2*l_1*p_58143360*l_2*p_179667936>")
# Verify that b2 and b3 satisfy the presentation for A5 in the proof of Proposition 2
print(b2**2 == b3**3 == (b2*b3)**5 == MM("M<1>"))


# In[3]:


# The proof of Proposition 3 refers to SLPs for obtaining the generators
# b2 and b3 for A5 < A12 from the generators x3 and x10 for A12.
# Here are the SLPs; they should be called with a = x3 and b = x10.
def A5_in_A12_gen_1(a,b): b = a**2 * b; w3 = b * a; w4 = b * w3; w5 = a * w3; w6 = w4 * w5; w10 = w5 * a; w11 = w6 * w10; w16 = a**2; w17 = w11 * w16; w12 = b**-4; w7 = b**-3; w8 = w6 * w7; w9 = w8**-1; w13 = w12 * w9; w18 = w17 * w13; w19 = w18**-1; w20 = w10 * w16; w21 = w17 * w20; w22 = b**-5; w23 = w22 * w9; w24 = w21 * w23; w26 = w19 * w24; w14 = w11 * w13; w27 = w26 * w14; w28 = w10 * a; w29 = w21 * w28; w30 = w20 * a; w31 = w29 * w30; w39 = a * w28; w40 = w31 * w39; w49 = w39 * w28; w50 = w40 * w49; w55 = w39 * w30; w56 = w50 * w55; w32 = b**3; w33 = a * w19; w15 = w14**-1; w34 = w15 * w9; w35 = w33 * w34; w36 = w32 * w35; w37 = w31 * w36; w57 = w37**-2; w58 = a * w57; w59 = w58 * w9; w25 = w24**-1; w38 = w37**-1; w60 = w25 * w38; w44 = w9 * w38; w51 = w15 * w44; w52 = w33 * w51; w53 = w50 * w52; w54 = w53**-1; w41 = b**2; w42 = w41 * a; w43 = w19 * w15; w45 = w43 * w44; w46 = w42 * w45; w47 = w40 * w46; w48 = w47**-1; w61 = w54 * w48; w62 = w60 * w61; w63 = w59 * w62; w64 = w56 * w63; w66 = w27 * w64; w67 = w66 * w24; w68 = w67 * w14; w69 = w68 * w47; w70 = w49 * w39; w71 = w56 * w70; w77 = w55 * w49; w78 = w71 * w77; w1 = a**-1; w79 = w1 * w9; w80 = w19 * w34; w81 = w79 * w80; w82 = w19 * w38; w65 = w64**-1; w72 = w38 * w9; w73 = w65 * w60; w74 = w72 * w73; w75 = w71 * w74; w83 = w75**-2; w84 = w65 * w83; w85 = w82 * w84; w86 = w81 * w85; w87 = w78 * w86; w89 = w69 * w87; w90 = w89 * w87; w91 = w90 * w37; w92 = w91 * w18; return w92;
def A5_in_A12_gen_2(a,b): b = a**2 * b; w3 = b * a; w4 = b * w3; w5 = a * w3; w6 = w4 * w5; w10 = w5 * a; w11 = w6 * w10; w16 = a**2; w17 = w11 * w16; w20 = w10 * w16; w21 = w17 * w20; w28 = w10 * a; w29 = w21 * w28; w30 = w20 * a; w31 = w29 * w30; w39 = a * w28; w40 = w31 * w39; w49 = w39 * w28; w50 = w40 * w49; w55 = w39 * w30; w56 = w50 * w55; w70 = w49 * w39; w71 = w56 * w70; w77 = w55 * w49; w78 = w71 * w77; w93 = w55 * w70; w94 = w78 * w93; w22 = b**-5; w12 = b**-4; w7 = b**-3; w8 = w6 * w7; w9 = w8**-1; w13 = w12 * w9; w18 = w17 * w13; w19 = w18**-1; w14 = w11 * w13; w15 = w14**-1; w43 = w19 * w15; w95 = w22 * w43; w32 = b**3; w33 = a * w19; w34 = w15 * w9; w35 = w33 * w34; w36 = w32 * w35; w37 = w31 * w36; w38 = w37**-1; w57 = w37**-2; w58 = a * w57; w59 = w58 * w9; w23 = w22 * w9; w24 = w21 * w23; w25 = w24**-1; w60 = w25 * w38; w44 = w9 * w38; w51 = w15 * w44; w52 = w33 * w51; w53 = w50 * w52; w54 = w53**-1; w41 = b**2; w42 = w41 * a; w45 = w43 * w44; w46 = w42 * w45; w47 = w40 * w46; w48 = w47**-1; w61 = w54 * w48; w62 = w60 * w61; w63 = w59 * w62; w64 = w56 * w63; w65 = w64**-1; w96 = w38 * w65; w97 = w9 * w96; w72 = w38 * w9; w73 = w65 * w60; w74 = w72 * w73; w75 = w71 * w74; w83 = w75**-2; w1 = a**-1; w79 = w1 * w9; w80 = w19 * w34; w81 = w79 * w80; w82 = w19 * w38; w84 = w65 * w83; w85 = w82 * w84; w86 = w81 * w85; w87 = w78 * w86; w88 = w87**-1; w98 = w88 * w19; w99 = w83 * w98; w100 = w97 * w99; w101 = w95 * w100; w102 = w94 * w101; w103 = w102**-1; w104 = w103 * w18; w105 = w104 * w24; w106 = w105 * w64; w107 = w106 * w24; w108 = w107 * w14; w109 = w108 * w48; w110 = w109 * w88; w111 = w110 * w88; w112 = w111 * w38; w76 = w75**-1; w113 = w112 * w76; w114 = w113 * w8; w115 = w114 * w75; w116 = w115 * b; w117 = w116 * b; return w117;

# Check
print(A5_in_A12_gen_1(x3, x10) == b2 and A5_in_A12_gen_2(x3, x10) == b3)

# These SLPs show that the group A_B constructed in Proposition 3 is an A5 of type "B".
# They should be used in conjunction with the supplementary GAP code also available at 
# https://github.com/melissa-maths/M 
# which provides GAP versions of the same SLPs which show that the A5 has orbits of
# lengths 6 and 6 on 12 points as claimed in the proof of Proposition 3.


# In[4]:


# Listing 2
# This is for verifying the proof Proposition 3

# Type G
g2G = MM("M<y_4f6h*x_1f98h*d_0b7h*p_67615847*l_1*p_2999040*l_1*p_86264262*l_2*p_11172480>")
g3G = MM("M<y_4e1h*x_19cbh*d_9c8h*p_19643307*l_1*p_2999040*l_1*p_64003504*l_2*p_1478400>")
g5G = g2G*g3G
c2G = MM("M<x_1000h>")
c5G = MM("M<y_548h*x_34ah*d_0a9ch*p_243281095*l_1*p_1457280*l_2*p_43255315*t_2*l_1*p_3840*l_2*p_465936*l_2*p_1101120*t_1*l_2*p_2787840*l_2*p_32009429*l_1*t_2*l_2*p_2956800*l_1*p_64018007*t_1*l_2*p_2880*l_2*p_3120*l_2*p_2579520*t_2*l_2*p_2830080*l_2*p_42706069*t_1*l_2*p_2787840*l_2*p_148289>")
hu = MM("M<y_51h*x_319h*d_0d15h*p_65451314*l_2*p_2344320*l_2*p_23241234*l_1*t_1*l_1*p_2027520*l_1*p_33397753*l_1*t_1*l_2*p_1393920*l_1*p_10666752*l_1*p_3847680*t_2*l_2*p_1943040*l_2*p_21374615*t_1*l_2*p_2880*l_2*p_10666896*l_2*p_2959680*t_1*l_1*p_1499520*l_1*p_85838981*t_1*l_2*p_506880>")
hv = MM("M<y_152h*x_33ah*d_0f3h*p_183194050*l_2*p_71005440*l_2*p_85198272*t_1*l_2*p_2386560*l_2*p_2355444*l_1*t_1*l_2*p_1920*l_2*p_467712*l_2*p_10371840*t_2*l_2*p_2597760*l_1*p_96018816*t_2*l_2*p_1985280*l_1*p_21419925*t_1*l_2*p_1900800*l_2*p_135669*t_2*l_1*p_1499520*l_1*p_64088183>")

# Check type G 
# g2G and g3G should lie in the fixed maximal subgroup G = G_x0 of M
print(g2G.in_G_x0() and g3G.in_G_x0())
# g2G and g3G should satisfy the presentation for A5 in the proof of Proposition 3
print(g2G**2 == g3G**3 == g5G**5 == MM("M<1>"))
# character values of g2G, g3G, g5G in the 196883-dim. complex rep. of M should be 275, -1, 8
print(g2G.chi_G_x0()[0] == 275 and g3G.chi_G_x0()[0] == -1 and g5G.chi_G_x0()[0] == 8)
# c2G and c5G should centralise g2G and g3G
print(Comm(c2G,g2G) == Comm(c2G,g3G) == Comm(c5G,g2G) == Comm(c5G,g3G) == MM("M<1>"))
# c2G should invert c5G (these generate D10) 
print(c5G**c2G == c5G**-1)
# hu and hv should conjugate u5 = g5G*c5G v5 = g5G*c5G**2 respectively to g5G
print((g5G*c5G)**hu == (g5G*c5G**2)**hv == g2G*g3G)


# In[5]:


# Type T
g2T = MM("M<y_82h*x_140eh*d_327h*p_130881367*l_1*p_80319360*l_1*p_131324208*l_1*t_1*l_1*p_69674880*l_2*p_160152960*l_1*t_1*l_1*p_48829440*l_1*p_230229120*l_2*t_1*l_1*p_70561920*l_1*p_87859296>")
g3T = MM("M<y_430h*x_0d4h*d_8a2h*p_242204766*l_2*p_60804480*l_2*p_11552640*l_2*t_1*l_2*p_49272960*l_1*p_172128000*l_2*t_1*l_1*p_59917440*l_1*p_239986560*l_1*t_2*l_2*p_3125760*l_2*t_1*l_2*p_47055360>")
g5T = g2T*g3T
c2T = MM("M<d_200h>")
c3T = MM("M<y_4cdh*x_1274h*d_499h*p_8151915*l_2*p_1900800*l_2*p_43255347*t_2*l_2*p_2597760*l_1*p_479249*l_2*t_2*l_1*p_4654080*t_1*l_2*p_2956800*l_1*p_53436116*t_2*l_2*p_2386560*l_2*p_85412773*t_1*l_1*p_1499520*l_1*p_106661296>")
i2T = MM("M<y_1d9h*x_1d53h*d_170h*p_157936168*l_2*p_68344320*l_2*p_202730880*l_2*t_1*l_1*p_78545280*l_1*p_212044848*l_2*t_2*l_1*p_80762880*l_2*p_149508480*l_2*t_1*l_1*p_81206400*l_1*p_85198176>")
hT = MM("M<y_17eh*x_143ah*d_0c93h*p_48068830*l_2*p_2956800*l_1*p_43160055*t_2*l_2*p_1943040*l_2*p_1471043*l_1*t_2*l_1*p_1499520*l_1*p_32513830*l_1*t_1*l_2*p_2830080*l_2*p_85329986*t_2*l_2*p_1985280*l_1*p_96485399*t_1*l_2*p_2386560*l_2*p_85330945>")

# Check type T 
# g2T and g3T should satisfy the presentation for A5 in the proof of Proposition 3
print(g2T**2 == g3T**3 == g5T**5 == MM("M<1>"))
# c2T and c3T should centralise g2T and g3T 
print(Comm(c2T,g2T) == Comm(c2T,g3T) == Comm(c3T,g2T) == Comm(c3T,g3T) == MM("M<1>"))
# c2T should invert c3T (these generate S3)
print(c3T**c2T == c3T**-1)
# i2T should centralise g5T
print(g5T**i2T == g5T)
# hT should conjugate i2T to the central involution in G = G_x0
print(i2T**hT == MM("M<x_1000h>"))
# g5T**hT should lie in G = G_x0 and should have character value 8 in the 196883-dim. rep. of M
print((g5T**hT).in_G_x0() and (g5T**hT).chi_G_x0()[0] == 8)


# In[6]:


# Type B
# Here a2, a3, b2, b3 are defined as in Listing 1
g2B, g3B = a2*b2, a3*b3
g5B = g2B*g3B
c2B = MM("M<y_15h*x_1c83h*d_955h*p_191219869*l_2*p_48829440*l_2*p_85198080*t_1*l_2*p_7560960*l_2*p_1795200*t_2*l_1*p_67013760*l_1>")
i2B = MM("M<y_487h*x_1426h*d_602h*p_173036153*l_2*p_47055360*l_1*p_53264640*t_1*l_1*p_60360960*l_1*p_182772480*l_2*t_1*l_1*p_59473920*l_2*p_192086400*l_2*t_1*l_1*p_3569280*l_2*t_2*l_2*p_66570240*l_1>")
hB = MM("M<y_4f1h*x_9bch*d_0f77h*p_106507260*l_1*p_80762880*l_2*p_213375504*t_2*l_1*p_1499520*l_2*p_583047*t_2*l_2*p_1900800*l_2*p_1040998*t_2*l_2*p_2386560*l_2*p_21331401*t_1>")

# Check type B
# g2T and g3T should satisfy the presentation for A5 in the proof of Proposition 3
print(g2B**2 == g3B**3 == g5B**5 == MM("M<1>"))
# c2B should centralise g2B and g3B 
print(Comm(c2B,g2B) == Comm(c2B,g3B) == MM("M<1>"))
# i2B should centralise g5B
print(g5B**i2B == g5B)
# hB should conjugate i2B to the central involution in G = G_x0
print(i2B**hB == MM("M<x_1000h>"))
# g5B**hB should lie in G = G_x0 and should have character value 8 in the 196883-dim. rep. of M
print((g5B**hB).in_G_x0() and (g5B**hB).chi_G_x0()[0] == 8)


# In[7]:


# The code that follows can be used to verify parts of the proof of Theorem 1.1 itself

# In the fourth paragraph of the proof of Theorem 1.1 for PSL(2,16) (Section 4), 
# we refer to character values of the elements g5 = g2*g3 in the 24-dim. rep. of Co1 over F2.
# We claim that these character values should be -1 for types G and B, and -6 for type T, 
# corresponding to the elements having fixed-point spaces of dimension 4 and 0 respectively. 
# The character values are given up to sign by g5.chi_G_x0()[2] assuming that g5 lies in G_x0. 
# In cases T and B, we first need to conjugate g5 into G_x0 using the corresponding element "h".
g5G.chi_G_x0()[2] == (g5B**hB).chi_G_x0()[2] == 1 and (g5T**hT).chi_G_x0()[2] == 6


# In[8]:


# The proof of Theorem 1.1 for PSL(2,16) also describes constructions of certain "large" 
# subgroups of the normalisers in M of the elements g5 = g2*g3.
# These can be used to recover the involutions j2 inverting the g5 
# by random search in the subgroups generated by elements given below, cf. Remark 6.
# Note that mmgroup has no in-built functionality for doing this; we did it 
# by implementing the product replacement algorithm in Python/mmgroup.

# Various elements normalising g5G
normaliser_of_g5G = [MM("M<y_401h*x_0c4dh*d_193h*p_214145658*l_2*p_2880*l_2*p_10667856*l_1*p_2434560>"),
 MM("M<y_748h*x_19ah*d_671h*p_32272403*l_1*p_2027520*l_1*p_11240054*l_1>"),
 MM("M<y_7aeh*x_1530h*d_0eb9h*p_84540987*l_2*p_2830080*l_2*p_106666098*l_2*p_2344320>"),
 MM("M<y_0b2h*x_1f50h*d_166h*p_52605150*l_2*p_1394880*l_2*p_11659536*l_1>"),
 MM("M<x_861h*d_8cfh>"),
 MM("M<x_4feh*d_51bh>"),
 MM("M<x_28ch*d_4ceh>"),
 MM("M<x_1ebh*d_5edh>"),
 MM("M<y_442h*x_18b3h*d_5c1h*p_223189606*l_2*p_1985280*l_1*p_32794>"),
 MM("M<y_477h*x_0cdch*d_7fdh*p_85726267*l_1*p_2640000*l_1*p_86275793*t_2*l_2*p_1985280*l_1*p_12545571*l_2*t_1*l_1*p_171684480*t_2*l_1*p_1499520*l_1*p_106704594*t_1*l_2*p_1985280*l_1*p_53393670>"),
 MM("M<y_52dh*x_1851h*d_0b46h*p_191358785*l_2*p_1985280*l_1*p_21887385>"),
 MM("M<y_6eh*x_0f2h*d_83bh*p_146388894*l_1*p_1499520*l_1*p_32996736*l_1>"),
 MM("M<y_17h*x_717h*d_962h*p_122220815*l_2*p_1943040*l_2*p_33445043*l_1*t_2*l_2*p_2386560*l_2*p_21796112*l_1*t_2*l_2*p_1457280*l_1*p_22760119*l_1*t_2*l_2*p_2386560*l_2*p_42676035*t_2*l_2*p_2956800*l_1*p_106665162*t_1*l_2*p_2956800*l_1*p_85411814*t_1*l_2*p_1943040*l_2*p_21376531*t_1*l_1*p_1499520*l_2*p_21447718>"),
 MM("M<y_1a4h*x_68dh*d_270h*p_570798*l_2*p_1943040*l_2*p_53370860*t_1*l_1*p_2027520*l_1*p_1397931*l_2*t_1*l_1*p_172128000*t_2*l_2*p_1900800*l_2*p_8642*t_1*l_2*p_1943040*l_2*p_21440992>"),
 MM("M<y_4c2h*x_0c5ch*d_0eb4h*p_173437846*l_2*p_69674880*l_1*p_199626288*t_2*l_1*p_49272960*l_2*p_240873600*l_2*t_1*l_1*p_2999040*l_1*p_1948448*l_2*t_2*l_2*p_1900800*l_2*p_1056394*t_1*l_2*p_1985280*l_1*p_42728035*t_1*l_2*p_2830080*l_2*p_42712720*t_2*l_1*p_1499520*l_2*p_85332899>")]

# Check that these elements do normalise g5G
g5G_cyclic_group = [g5G**i for i in range(g5G.order())]
[g5G**x in g5G_cyclic_group for x in normaliser_of_g5G].count(True) == len(normaliser_of_g5G)


# In[9]:


# Various elements normalising g5T
normaliser_of_g5T = [MM("M<y_66h*x_1e9dh*d_0f2ah*p_137492110*l_2*p_1985280*l_1*p_12167510*t_2*l_1*p_3840*l_2*p_32461776*l_2*t_2*l_2*p_1415040*l_1*p_10666800*l_1*p_6066240*t_2*l_1*p_2821440*l_2*t_2*l_1*p_1499520*l_1*p_21333338*t_1*l_2*p_2830080*l_2*p_32948486*l_1*t_2*l_2*p_1943040*l_2*p_42730008*t_1*l_2*p_3316800>"),
 MM("M<y_1ebh*x_15cbh*d_3e8h*p_214705904*l_1*p_60360960*l_2*p_132211248*t_2*l_1*p_71005440*l_1*p_239986560*l_1*t_2*l_2*p_19092480*l_2*p_2238720*l_1*t_2*l_2*p_70561920*l_1*p_42620352>"),
 MM("M<y_118h*x_1a32h*d_8d4h*p_208898175*l_1*p_933120*l_2*t_2*l_1*p_1394880*l_2*p_2831520*l_2*t_2*l_2*p_2386560*l_2*p_2392784*l_1*t_2*l_1*p_2640000*l_1*p_6752*t_1*l_1*p_2027520*l_1*p_130930*t_1*l_2*p_1985280*l_1*p_64044903*t_1*l_2*p_1457280*l_1*p_178961*t_2*l_2*p_1943040*l_2*p_53803620>"),
 MM("M<y_51dh*x_160eh*d_0bc9h*p_200217151*l_2*p_1943040*l_2*p_473506*l_1*t_2*l_2*p_2956800*l_1*p_22456*l_1*t_2*l_2*p_2787840*l_2*p_22309079*l_2*t_2*l_2*p_1943040*l_2*p_127992615*t_1*l_1*p_1499520*l_1*p_42676994*t_1*l_1*p_2027520*l_1*p_54897*t_1*l_2*p_2386560*l_2*p_43622741>"),
 MM("M<y_5bh*x_1359h*d_0cc4h*p_190756722*l_2*p_1985280*l_1*p_32950456*t_1*l_2*p_2344320*l_2*p_12598582*l_2*t_1*l_1*p_2999040*l_1*p_11709585*l_2*t_2*l_2*p_2386560*l_2*p_11660533*t_1*l_1*p_2999040*l_1*p_96036066*l_2*p_21333120*t_1*l_1*p_960*l_2*p_10665840*l_2*p_1931520>"),
 MM("M<y_468h*x_16a5h*d_5f2h*p_99157995*l_2*p_2830080*l_2*p_1925313*l_2*t_1*l_2*p_2956800*l_1*p_1399859*l_2*t_1*l_2*p_1985280*l_1*p_22778418*l_1*t_1*l_2*p_1985280*l_1*p_85326147*t_2*l_2*p_2386560*l_2*p_85820731*t_2*l_2*p_1943040*l_2*p_96461344*t_2*l_1*p_2640000*l_1*p_51073*t_1*l_2*p_1985280*l_1*p_53805493>"),
 MM("M<y_45ah*x_18c0h*d_891h*p_138166856*l_2*p_2787840*l_2*p_21817157*l_2*t_2*l_2*p_1920*l_1*p_464928*l_1*p_2369280*t_2*l_2*p_1900800*l_2*p_1511601*l_2*t_2*l_1*p_1499520*l_2*p_10779194*t_2*l_1*p_68787840*l_1*p_210270720*l_2*t_1*l_2*p_173015040*l_2>"),
 MM("M<y_270h*x_47eh*d_0c32h*p_145938732*l_1*p_1499520*l_2*p_1486598*l_2*t_1*l_2*p_2597760*l_1*p_471569*l_2*t_1*l_1*p_2027520*l_1*p_12995026*t_1*l_2*p_1943040*l_2*p_53826660*t_1*l_1*p_1499520*l_1*p_21463125*t_2*l_1*p_1499520*l_2*p_42747518>"),
 MM("M<y_200h*x_15c2h*d_57dh*p_8511108*l_1*p_1499520*l_1*p_22774566*l_2*t_1*l_2*p_1900800*l_2*p_23338*l_1*t_1*l_2*p_2956800*l_1*p_23191028*l_1*t_2*l_1*p_1499520*l_1*p_13016293*t_1*l_2*p_2956800*l_1*p_42676034*t_2*l_2*p_2386560*l_2*p_53354273*t_2*l_1*p_1499520*l_2*p_42707940>"),
 MM("M<y_49eh*x_10b5h*d_0b9fh*p_105135069*l_2*p_59473920*l_2*p_63909312*t_2*l_2*p_2597760*l_1*p_10667802*l_2*t_1*l_2*p_1858560*l_1*p_465792*l_2*p_499200*t_2*l_2*p_1457280*l_1*p_1901124*t_2*l_2*p_2597760*l_1*p_85372329*t_1*l_1*p_1499520*l_2*p_42796354*t_2*l_1*p_3254400*l_2>"),
 MM("M<y_8ch*x_1484h*d_514h*p_30834449*l_2*p_2597760*l_1*p_43613397*t_1*l_2*p_1943040*l_2*p_13058419*l_2*t_2*l_1*p_199680*t_1*l_2*p_2830080*l_2*p_53823776*t_1*l_2*p_2830080*l_2*p_21347617*t_2*l_2*p_2386560*l_2*p_53907499>")]

# Check that these elements do normalise g5T
g5T_cyclic_group = [g5T**i for i in range(g5T.order())]
[g5T**x in g5T_cyclic_group for x in normaliser_of_g5T].count(True) == len(normaliser_of_g5T)


# In[10]:


# Various elements normalising g5B
normaliser_of_g5B = [MM("M<y_0b7h*x_8e8h*d_873h*p_125664661*l_2*p_1985280*l_1*p_572564*t_1*l_2*p_2956800*l_1*p_1471041*l_1*t_2*l_2*p_1985280*l_1*p_2818145*l_1*t_2*l_1*p_2999040*l_1*p_13464*t_1*l_1*p_1499520*l_1*p_85335765*t_2*l_1*p_1499520*l_1*p_42676036*t_2*l_2*p_2956800*l_1*p_85370401*t_2*l_1*p_78988800*l_2*p_161927136>"),
 MM("M<y_64ch*x_1b3eh*d_20h*p_164693784*l_1*p_2027520*l_1*p_22367553*t_1*l_2*p_2344320*l_2*p_10666777*l_1*t_1*l_1*p_1858560*l_1*p_465936*l_2*p_623040*t_2*l_2*p_2830080*l_2*p_21419906*t_1*l_1*p_1393920*l_2*p_21456*l_1*p_764160*t_1*l_2*p_1900800*l_2*p_1953*t_2*l_2*p_2386560*l_2*p_53443812>"),
 MM("M<y_4b2h*x_1de8h*d_4d5h*p_105600541*l_2*p_2830080*l_2*p_22310027*l_2*t_1*l_2*p_2830080*l_2*p_33454538*l_1*t_1*l_2*p_2787840*l_2*p_21796180*l_1*t_2*l_2*p_2597760*l_1*p_43174435*t_1*l_1*p_1499520*l_2*p_64128619*t_2*l_2*p_2830080*l_2*p_85327127*t_1*l_2*p_2956800*l_1*p_96478691>"),
 MM("M<y_141h*x_6ffh*d_87fh*p_50856855*l_1*p_2999040*l_1*p_12610118*t_1*l_2*p_2830080*l_2*p_25969*t_2*l_1*p_2027520*l_1*p_1940*t_1*l_1*p_1499520*l_2*p_11223699*t_1*l_1*p_1394880*l_1*p_10668768*l_2*p_132480*t_2*l_1*p_464640*l_2*p_42706032*t_1*l_1*p_1499520*l_1*p_21424627>"),
 MM("M<y_11bh*x_0cc7h*d_0b47h*p_194811739*l_2*p_1457280*l_1*p_33400789*t_1*l_2*p_2956800*l_1*p_13012305*l_2*t_2*l_2*p_1457280*l_1*p_21890512*l_1*t_1*l_2*p_2386560*l_2*p_42799222*t_2*l_2*p_50603520*l_1*p_173015040*l_1*t_2*l_1*p_47498880*l_2*p_240873888>"),
 MM("M<y_400h*x_1973h*d_156h*p_41501581*l_2*p_1943040*l_2*p_53821828*t_1*l_2*p_1900800*l_2*p_21805601*l_2*t_1*l_2*p_1985280*l_1*p_23218100*l_1*t_2*l_1*p_1499520*l_1*p_11160147*t_1*l_2*p_59473920*l_1*p_172128000*l_1*t_1*l_2*p_13770240*l_2>"),
 MM("M<y_4d1h*x_1174h*d_0d83h*p_131556556*l_1*p_1499520*l_1*p_21929794*l_1*t_2*l_2*p_1457280*l_1*p_131858*t_1*l_1*p_2999040*l_1*p_515664*t_2*l_1*p_2640000*l_1*p_217473*t_1*l_1*p_70561920*l_1*p_63909312*t_2*l_1*p_71005440*l_1*p_63909408>"),
 MM("M<y_563h*x_1dbfh*d_0d2h*p_203237214*l_2*p_2386560*l_2*p_1526983*l_1*t_2*l_2*p_18648960*l_1*p_12883200*l_2*t_2*l_2*p_2880*l_2*p_22368*l_2*p_963840*t_2*l_1*p_26880*l_2*t_1*l_2*p_71005440*l_2*p_85198080*t_1*l_1*p_55482240*l_2*p_51469440*l_1*t_2*l_1*p_70561920>"),
 MM("M<y_1ech*x_1576h*d_0ed7h*p_165495892*l_2*p_80762880*l_1*p_200956944*t_2*l_1*p_71005440*l_2*p_192973440*l_1*t_1*l_1*p_49272960*l_1*p_232890288*l_2*t_2*l_1*p_70561920>"),
 MM("M<y_12ch*x_1da3h*d_52eh*p_194452602*l_2*p_2956800*l_1*p_1529873*l_1*t_1*l_1*p_2999040*l_1*p_22307957*l_1*t_2*l_1*p_2640000*l_1*p_2353526*l_1*t_2*l_1*p_1499520*l_1*p_85328070*t_1*l_2*p_2597760*l_1*p_96480609*t_2*l_1*p_2640000*l_1*p_11141956*l_1*t_1*l_1*p_50603520*l_2*p_240873696>"),
 MM("M<y_0f5h*x_0efbh*d_5e9h*p_182899602*l_2*p_1457280*l_1*p_12596644*l_1*t_2*l_2*p_2830080*l_2*p_12176289*l_1*t_1*l_2*p_1393920*l_1*p_10668816*l_2*p_2473920*t_1*l_2*p_1985280*l_1*p_32000867*t_1*l_2*p_2830080*l_2*p_42838694*t_2*l_2*p_2597760*l_1*p_127993573*t_1*l_2*p_2787840*l_2*p_97152>"),
 MM("M<y_229h*x_1dc0h*d_0fe0h*p_231348152*l_1*p_1457280*l_2*p_1015203*t_1*l_2*p_1943040*l_2*p_31998026*l_1*t_1*l_2*p_2344320*l_2*p_2834359*l_2*t_1*l_2*p_1859520*l_2*t_1*l_1*p_1499520*l_1*p_106703659*t_1*l_2*p_2956800*l_1*p_85330963*t_1*l_2*p_2830080*l_2*p_11216307*t_1*l_2*p_1943040*l_2*p_127988771>"),
 MM("M<y_756h*x_1fh*d_20bh*p_6736627*l_1*p_1499520*l_2*p_11703830*l_1*t_2*l_1*p_2027520*l_1*p_3124*l_1*t_2*l_2*p_1394880*l_2*p_466848*l_1*p_3763200*t_1*l_2*p_2386560*l_2*p_23254528*t_2*l_2*p_1900800*l_2*p_22768694*l_1*t_1*l_2*p_2956800*l_1*p_42837733*t_1*l_1*p_1499520*l_2*p_64006378>"),
 MM("M<y_103h*x_4d9h*d_16ch*p_56537890*l_1*p_2640000*l_1*p_21888598*t_1*l_1*p_1394880*l_1*p_11616240*l_1*t_2*l_1*p_1394880*l_2*p_21360*l_1*p_107520*t_2*l_2*p_6720*l_1*t_1*l_2*p_2344320*l_2*p_65491*t_2*l_2*p_1985280*l_1*p_85331939*t_2*l_2*p_2956800*l_1*p_64017978*t_1*l_2*p_1943040*l_2*p_96461345>"),
 MM("M<y_41dh*x_19a7h*d_41bh*p_105177535*l_1*p_1499520*l_1*p_10688160*t_2*l_1*p_466560*l_1*p_1904160*l_2*t_1*l_2*p_2956800*l_1*p_2410055*l_2*t_1*l_2*p_1943040*l_2*p_42718449*t_1*l_2*p_2597760*l_1*p_96021712*t_2*l_2*p_1985280*l_1*p_63999749*t_1*l_1*p_2640000*l_1*p_14426>")]

# Check that these elements do normalise g5B
g5B_cyclic_group = [g5B**i for i in range(g5B.order())]
[g5B**x in g5B_cyclic_group for x in normaliser_of_g5B].count(True) == len(normaliser_of_g5B)


# In[11]:


# Finally, in the proof of Theorem 1.1 we assert that there are exactly 40 involutions 
# in M that invert g5B and extend A_B to a group isomorphic to PSL(2,16). 
# Here are the claimed 40 involutions for reference.
involutions_inverting_g5B = [MM("M<y_1a6h*x_1126h*d_4b0h*p_114554739*l_2*p_2344320*l_2*p_1913639*l_2*t_2*l_2*p_1920*l_1*p_3168*l_1*t_1*l_1*p_960*l_1*p_466848*l_1*p_2959680*t_1*l_2*p_2518080*l_2*t_1*l_1*p_1499520*l_2*p_21379397*t_2*l_2*p_2386560*l_2*p_96021731*t_2*l_2*p_2597760*l_1*p_64044905*t_2*l_2*p_2830080*l_2*p_43592085>"),
 MM("M<y_8ah*x_965h*d_0c4bh*p_222266216*l_2*p_50160000*l_2*p_220471680*l_2*t_2*l_1*p_50160000*l_2*p_233333856*t_1*l_1*p_1499520*l_2*p_43615126*t_2*l_2*p_2597760*l_1*p_53795810*t_2*l_1*p_1920*l_1*p_1152*l_1*p_298560*t_1*l_1*p_1499520*l_2*p_170654249*t_1*l_2*p_2597760*l_1*p_53459129>"),
 MM("M<y_452h*x_0eb7h*d_33ch*p_92907778*l_2*p_1985280*l_1*p_32509776*l_1*t_2*l_1*p_1499520*l_1*p_12991986*l_1*t_2*l_2*p_1415040*l_2*p_21312*l_1*p_3463680*t_1*l_2*p_2956800*l_1*p_64002534*t_2*l_2*p_1943040*l_2*p_42757851*t_2*l_2*p_2386560*l_2*p_85815926*t_2*l_2*p_2597760*l_1*p_86259459>"),
 MM("M<y_18fh*x_7f9h*d_0b4ch*p_58693155*l_2*p_2344320*l_2*p_21829666*l_1*t_2*l_2*p_2787840*l_2*p_23223812*l_1*t_1*l_1*p_2880*l_1*p_4032*l_1*p_616320*t_2*l_2*p_1985280*l_1*p_11616300*t_2*l_2*p_2830080*l_2*p_86280560*t_2*l_2*p_2956800*l_1*p_42718449*t_2*l_1*p_4266240>"),
 MM("M<y_155h*x_0cb4h*d_327h*p_77595109*l_1*p_4797120*t_1*l_2*p_2956800*l_1*p_2390900*l_1*t_2*l_2*p_1920*l_1*p_23280*l_1*p_1488960*t_2*l_2*p_49272960*l_2*p_230229120*t_2*l_2*p_1943040*l_2*p_86264260*l_1*p_22080*t_1*l_2*p_2830080*l_2*p_96480594*l_1*p_10665600>"),
 MM("M<y_155h*x_0d55h*d_3d1h*p_69209502*l_2*p_2597760*l_1*p_21333320*t_1*l_1*p_1499520*l_2*p_29864*l_2*t_2*l_2*p_2386560*l_2*p_12997012*l_1*t_2*l_2*p_2830080*l_2*p_127990698*t_2*l_1*p_2027520*l_1*p_494523*t_1*l_1*p_1499520*l_2*p_85377141*l_1*t_1*l_2*p_2956800*l_1*p_498417>"),
 MM("M<y_412h*x_85eh*d_6dch*p_226301460*l_2*p_1985280*l_1*p_528386*t_1*l_2*p_1393920*l_1*p_22416*l_2*t_1*l_1*p_1920*l_1*p_465888*l_1*p_993600*t_2*l_1*p_25920*l_1*t_2*l_1*p_1499520*l_1*p_10730147*t_2*l_2*p_1943040*l_2*p_42832931*t_2*l_2*p_1985280*l_1*p_10720487*t_2*l_2*p_2956800*l_1*p_43256258>"),
 MM("M<y_0f6h*x_1e81h*d_991h*p_147924974*l_2*p_1457280*l_1*p_12156080*l_1*t_2*l_2*p_2597760*l_1*p_23197937*l_1*t_1*l_1*p_2880*l_2*p_23232*l_2*p_4293120*t_2*l_2*p_2830080*l_2*p_21503536*t_2*l_1*p_1457280*l_2*p_11136163*l_2*t_2*l_2*p_1457280*l_1*p_32103844*l_1>"),
 MM("M<y_77h*x_0c1dh*d_33ah*p_118019516*l_2*p_2787840*l_2*p_42858*t_1*l_1*p_1499520*l_1*p_23262304*l_2*t_1*l_1*p_1394880*l_1*p_2160*l_2*p_2477760*t_2*l_2*p_2830080*l_2*p_11144810*t_1*l_2*p_2830080*l_2*p_42728066*t_1*l_1*p_1499520*l_2*p_53816981*t_1*l_1*p_1499520*l_1*p_64045846>"),
 MM("M<y_47fh*x_78fh*d_4efh*p_171705371*l_2*p_2830080*l_2*p_12110842*l_2*t_1*l_2*p_1394880*l_1*p_466896*l_2*p_130560*t_1*l_2*p_2787840*l_2*p_2801632*l_1*t_2*l_1*p_1499520*l_1*p_31998006*t_2*l_2*p_1985280*l_1*p_63994952*t_2*l_2*p_1457280*l_1*p_1016370*t_1*l_2*p_2787840*l_2*p_160673>"),
 MM("M<y_753h*x_21dh*d_0f00h*p_110056107*l_1*p_1920*l_2*p_971760*t_2*l_2*p_1943040*l_2*p_10666777*l_1*t_2*l_1*p_1393920*l_1*p_2256*l_2*p_179520*t_1*l_2*p_2597760*l_1*p_43263010*t_2*l_2*p_2386560*l_2*p_43706455*t_1*l_2*p_1985280*l_1*p_43678788*t_1*l_2*p_1985280*l_1*p_64005410>"),
 MM("M<y_51ah*x_528h*d_0bf3h*p_189869481*l_2*p_1985280*l_1*p_64036461*t_1*l_1*p_1457280*l_2*p_10698375*t_1*l_1*p_1499520*l_1*p_11188072*t_2*l_2*p_1457280*l_1*p_93337*t_1*l_2*p_1457280*l_1*p_219393*t_1*l_1*p_1457280*l_2*p_44546*t_1*l_2*p_1943040*l_2*p_53837191>"),
 MM("M<y_42dh*x_143eh*d_0a3ah*p_83487431*l_2*p_2344320*l_2*p_23264209*l_2*t_1*l_2*p_2956800*l_1*p_5940*l_1*t_2*l_2*p_2830080*l_2*p_22377108*l_1*t_1*l_2*p_2830080*l_2*p_12579257*t_1*l_1*p_2027520*l_1*p_106661314*l_2*p_10668480*t_1*l_2*p_2956800*l_1*p_1526054*l_1>"),
 MM("M<y_3h*x_80fh*d_0b85h*p_15206084*l_2*p_2344320*l_2*p_12597633*l_2*t_2*l_2*p_2386560*l_2*p_32549317*l_1*t_2*l_1*p_960*l_2*p_21456*l_2*p_2437440*t_1*l_1*p_1457280*l_2*p_70228*t_2*l_2*p_2344320*l_2*p_139498*t_1*l_1*p_1499520*l_2*p_85370411*t_2*l_2*p_1985280*l_1*p_64120979>"),
 MM("M<y_42bh*x_0d79h*d_0fd9h*p_118566642*l_1*p_466560*l_1*p_507360*t_2*l_2*p_1900800*l_2*p_12550530*l_1*t_2*l_2*p_1394880*l_2*p_24336*l_1*p_1521600*t_1*l_2*p_2386560*l_2*p_64001584*t_1*l_2*p_2597760*l_1*p_85336723*t_2*l_1*p_1499520*l_2*p_53902691*t_1*l_2*p_1985280*l_1*p_127988773>"),
 MM("M<y_416h*x_0dc1h*d_753h*p_145960881*l_1*p_70118400*l_2*p_171684480*l_1*t_1*l_1*p_1457280*l_2*p_32112522*l_1*t_1*l_2*p_1858560*l_2*p_464928*l_1*p_3785280*t_1*l_2*p_2956800*l_1*p_42668368*t_1*l_2*p_1985280*l_1*p_85835157*l_2*p_951360*t_2*l_2*p_1985280*l_1*p_42707946*l_2*p_10665600>"),
 MM("M<y_13bh*x_1f22h*d_67ah*p_241761356*l_2*p_2344320*l_2*p_11598944*t_2*l_2*p_2787840*l_2*p_32549296*l_1*t_1*l_1*p_1394880*l_2*p_21312*l_1*p_97920*t_2*l_2*p_2830080*l_2*p_64043906*t_2*l_2*p_2386560*l_2*p_106699777*t_1*l_2*p_1457280*l_1*p_132852*t_1*l_2*p_2830080*l_2*p_42663560>"),
 MM("M<y_1e8h*x_867h*d_0f4ah*p_201505057*l_1*p_2999040*l_1*p_1906064*l_2*t_1*l_2*p_1858560*l_1*p_10665888*l_1*p_1083840*t_1*l_1*p_1499520*l_2*p_32999643*l_2*t_1*l_2*p_2386560*l_2*p_96033260*t_1*l_1*p_1394880*l_1*p_4176*l_2*p_4353600*t_1*l_2*p_1943040*l_2*p_64020835*t_1*l_2*p_2830080*l_2*p_43604473>"),
 MM("M<y_6b4h*x_1b19h*d_323h*p_192657058*l_1*p_1457280*l_2*p_32551155*l_1*t_2*l_2*p_1457280*l_1*p_11661639*l_2*t_1*l_1*p_3840*l_2*p_464928*l_2*p_1948800*t_1*l_2*p_5160000*t_2*l_2*p_1985280*l_1*p_42671266*t_1*l_1*p_21120*l_1*p_43697952*t_2*l_2*p_1943040*l_2*p_42831985>"),
 MM("M<y_6dah*x_9d9h*d_0c04h*p_185412182*l_1*p_2640000*l_1*p_33013873*l_1*t_1*l_2*p_1943040*l_2*p_22769632*l_2*t_1*l_1*p_2999040*l_1*p_1419111*l_1*t_2*l_2*p_3020160*l_2*t_1*l_2*p_2830080*l_2*p_42836757*t_2*l_2*p_1943040*l_2*p_43161937*t_1*l_2*p_2956800*l_1*p_43196548*t_1*l_2*p_2344320*l_2*p_1937>"),
 MM("M<y_1cbh*x_0c7ch*d_7ech*p_161862937*l_2*p_1993920*l_1*t_2*l_1*p_1499520*l_2*p_469607*l_2*t_1*l_1*p_1457280*l_2*p_32126917*l_2*t_1*l_2*p_2344320*l_2*p_576391*t_2*l_2*p_2386560*l_2*p_64043946*t_1*l_2*p_1943040*l_2*p_64083394*t_1*l_2*p_1943040*l_2*p_170653290>"),
 MM("M<y_300h*x_0ae5h*d_90eh*p_173923830*l_1*p_2999040*l_1*p_1901092*l_1*t_1*l_2*p_1985280*l_1*p_21356312*t_2*l_1*p_1499520*l_2*p_64006454*t_1*l_2*p_2830080*l_2*p_11172914*t_2*l_2*p_1985280*l_1*p_42664532*t_2*l_2*p_1943040*l_2*p_10884082*t_1*l_2*p_2787840*l_2*p_12501>"),
 MM("M<y_432h*x_17cbh*d_6e5h*p_13411729*l_1*p_2640000*l_1*p_11236336*t_1*l_2*p_1457280*l_1*p_12108843*l_1*t_1*l_2*p_1393920*l_1*p_21360*l_2*p_65280*t_1*l_2*p_1943040*l_2*p_21446770*t_1*l_2*p_2956800*l_1*p_42834820*t_1*l_2*p_2597760*l_1*p_53442840*t_2*l_2*p_2386560*l_2*p_127989696>"),
 MM("M<y_17eh*x_1225h*d_2f5h*p_194093027*l_2*p_2597760*l_1*p_12153200*l_1*t_1*l_2*p_1920*l_2*p_24288*l_2*p_2899200*t_2*l_2*p_2787840*l_2*p_1501889*l_2*t_2*l_1*p_69231360*l_1*p_180998496*t_1*l_1*p_1920*l_2*p_10667760*l_1*p_2494080*t_2*l_2*p_3345600*l_2*t_2*l_1*p_1499520*l_1*p_42797315>"),
 MM("M<y_511h*x_1fe3h*d_3edh*p_155484770*l_2*p_2830080*l_2*p_11599915*l_2*t_2*l_2*p_2386560*l_2*p_32065409*l_1*t_2*l_1*p_1499520*l_1*p_33000454*l_2*t_2*l_2*p_2597760*l_1*p_43172512*t_2*l_2*p_1985280*l_1*p_42677970*t_1*l_2*p_2597760*l_1*p_10704132*t_1*l_2*p_1900800*l_2*p_58717>"),
 MM("M<y_174h*x_0dc6h*d_541h*p_132000462*l_2*p_1985280*l_1*p_1904164*t_2*l_1*p_2027520*l_1*p_10676234*t_1*l_1*p_1457280*l_2*p_489745*t_1*l_2*p_2956800*l_1*p_21873114*t_1*l_2*p_2386560*l_2*p_53394651*t_1*l_2*p_2787840*l_2*p_966875*t_2*l_2*p_1887360*l_2>"),
 MM("M<y_45ch*x_12ah*d_8a0h*p_193057876*l_2*p_1858560*l_1*p_32461680*l_2*t_2*l_2*p_1900800*l_2*p_12577512*l_2*t_1*l_2*p_1393920*l_1*p_10665936*l_1*p_2492160*t_2*l_2*p_2597760*l_1*p_64015158*t_2*l_2*p_1457280*l_1*p_96464230*l_1*p_10688640*t_2*l_1*p_2640000*l_1*p_10729406>"),
 MM("M<y_5b3h*x_0d7ch*d_67h*p_144713992*l_2*p_1457280*l_1*p_10674450*t_2*l_2*p_2787840*l_2*p_12059876*l_2*t_2*l_2*p_3840*l_1*p_4176*l_1*p_6065280*t_2*l_2*p_2787840*l_2*p_500259*t_1*l_2*p_2597760*l_1*p_96039893*l_2*p_1920*t_2*l_2*p_2597760*l_1*p_95252*l_2>"),
 MM("M<y_152h*x_191bh*d_0ef5h*p_70582253*l_1*p_2999040*l_1*p_22372306*t_1*l_1*p_464640*l_1*p_32504976*l_2*t_1*l_2*p_1457280*l_1*p_12594725*l_2*t_1*l_2*p_2597760*l_1*p_42677960*t_1*l_2*p_2386560*l_2*p_63998743*t_2*l_2*p_24000*l_2*p_64015104*t_2*l_1*p_1499520*l_2*p_21339059*t_1*l_2*p_2597760*l_1*p_53804500>"),
 MM("M<y_585h*x_1da5h*d_0b8ch*p_77678700*l_1*p_60804480*l_1*p_241760688*l_1*t_2*l_1*p_6673920*l_2*p_1795200*l_2*t_2*l_1*p_1457280*l_2*p_32576201*l_1*t_2*l_2*p_2956800*l_1*p_42677017*t_1*l_2*p_2830080*l_2*p_21428544*t_1*l_2*p_2597760*l_1*p_43153347*t_2*l_2*p_1943040*l_2*p_64001589*t_2*l_2*p_2830080*l_2*p_85328069>"),
 MM("M<y_1e5h*x_1d11h*d_9a2h*p_11573288*l_2*p_69674880*l_2*p_172571520*l_1*t_2*l_1*p_45281280*l_1*p_11552640*l_2*t_2*l_1*p_2640000*l_1*p_11691312*l_1*t_1*l_2*p_1943040*l_2*p_85326181*t_1*l_2*p_1943040*l_2*p_85819766*t_2*l_1*p_3840*l_2*p_10665840*l_1*p_10392960*t_1*l_1*p_3888000*l_1*t_1*l_2*p_1943040*l_2*p_85836130>"),
 MM("M<y_10bh*x_1270h*d_2c3h*p_234855125*l_2*p_2830080*l_2*p_63999698*t_2*l_2*p_2956800*l_1*p_22371331*l_2*t_2*l_2*p_2956800*l_1*p_475282*l_1*t_2*l_2*p_1943040*l_2*p_64024704*t_1*l_2*p_2787840*l_2*p_14427*t_1*l_2*p_1943040*l_2*p_85840917*t_2*l_1*p_49272960*l_2*p_161927328>"),
 MM("M<y_414h*x_263h*d_0e07h*p_31300264*l_1*p_2027520*l_1*p_11625824*l_1*t_1*l_2*p_2956800*l_1*p_1868386*l_2*t_1*l_2*p_1943040*l_2*p_1912821*l_1*t_2*l_2*p_1900800*l_2*p_6753*t_1*l_2*p_2597760*l_1*p_21344849*t_2*l_1*p_1499520*l_1*p_42670276*t_1*l_2*p_1985280*l_1*p_21363048*t_2*l_1*p_1457280*l_2*p_64790>"),
 MM("M<y_13dh*x_985h*d_1aah*p_198254363*l_2*p_1985280*l_1*p_1306*l_1*t_1*l_2*p_1415040*l_2*p_4176*l_1*p_178560*t_1*l_2*p_2386560*l_2*p_32548356*l_2*t_2*l_1*p_1499520*l_1*p_42711747*t_1*l_2*p_1457280*l_1*p_19201*t_1*l_2*p_1943040*l_2*p_21364949*t_1*l_2*p_1900800*l_2*p_12483>"),
 MM("M<y_157h*x_1c83h*d_5cbh*p_182349983*l_1*p_80319360*l_1*p_241317120*l_1*t_2*l_2*p_1943040*l_2*p_53378263*t_2*l_1*p_1499520*l_1*p_10698433*t_1*l_2*p_1943040*l_2*p_21344848*t_1*l_1*p_1499520*l_2*p_43177363*t_2*l_1*p_2640000*l_1*p_56803*t_2*l_1*p_2640000*l_1*p_15378>"),
 MM("M<y_593h*x_87ch*d_0a5ch*p_203745286*l_2*p_1985280*l_1*p_520550*t_1*l_2*p_1943040*l_2*p_12592817*l_1*t_2*l_2*p_2880*l_2*p_465792*l_2*p_3403200*t_1*l_1*p_2027520*l_1*p_932258*t_2*l_1*p_1499520*l_1*p_53455310*t_2*l_2*p_464640*l_1*p_53455296*t_2*l_2*p_2386560*l_2*p_53376384>"),
 MM("M<y_11bh*x_1646h*d_640h*p_181462845*l_2*p_2344320*l_2*p_11688473*t_2*l_2*p_1985280*l_1*p_11682595*l_1*t_1*l_1*p_1394880*l_2*p_24192*l_1*p_1587840*t_1*l_1*p_1457280*l_2*p_71220*t_1*l_1*p_1415040*l_2*p_23376*l_1*p_722880*t_2*l_2*p_23040*l_2*p_43170816*t_1*l_2*p_2386560*l_2*p_64085323>"),
 MM("M<y_0d7h*x_14dah*d_202h*p_189002550*l_1*p_70561920*l_2*p_12439680*l_2*t_2*l_1*p_1499520*l_2*p_22820779*l_2*t_2*l_2*p_2880*l_2*p_2160*l_2*p_10460160*t_1*l_2*p_2344320*l_2*p_75051*t_2*l_1*p_1393920*l_2*p_464832*l_1*p_1589760*t_1*l_1*p_8004480*l_1*t_1*l_2*p_6043200*l_1>"),
 MM("M<y_0ech*x_17f8h*d_7aeh*p_56919296*l_2*p_2956800*l_1*p_53440939*t_1*l_2*p_1943040*l_2*p_23233411*l_1*t_2*l_1*p_1499520*l_2*p_12171496*l_1*t_2*l_1*p_2999040*l_1*p_2800777*t_2*l_2*p_1900800*l_2*p_85414656*l_2*t_1*l_1*p_1394880*l_1*p_23232*l_2*p_6107520>"),
 MM("M<y_61h*x_32bh*d_2fch*p_58587268*l_2*p_1900800*l_2*p_521507*t_2*l_2*p_1457280*l_1*p_5912*l_2*t_2*l_2*p_1457280*l_1*p_2800897*l_1*t_1*l_2*p_2386560*l_2*p_64016096*t_1*l_2*p_2830080*l_2*p_53904595*t_1*l_2*p_1457280*l_1*p_12485*t_1*l_2*p_2830080*l_2*p_42792514>")]


# In[12]:


# Check that there are 40 involutions given
print(len(involutions_inverting_g5B) == 40)
# Check that they all invert g5B
print([g5B**x == g5B**-1 for x in involutions_inverting_g5B].count(True) == len(involutions_inverting_g5B))
# Check that they all commute with c2B, so that the PSL(2,16)s they produce are not maximal in M
print([Comm(x,c2B) == MM("M<1>") for x in involutions_inverting_g5B].count(True) == len(involutions_inverting_g5B))

# mmgroup also has no in-built functionality for checking whether the group generated 
# by A_B and one of these 40 involutions is isomorphic to PSL(2,16). 
# We did this by generating all elements of these groups using an orbit computation 
# and then following the strategy outlined in Remark 6 of the paper.

